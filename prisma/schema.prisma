datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  roles         UserRoles[]
  Post          Post[]
  Thread        Thread[]
  Comment       Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Role {
  id        BigInt    @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  users UserRoles[]
}

model UserRoles {
  userId String
  roleId BigInt

  User User @relation(fields: [userId], references: [id])
  Role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  authorId  String
  threadId  String
  author    User      @relation(fields: [authorId], references: [id])
  thread    Thread    @relation(fields: [threadId], references: [id])
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Thread {
  id            String       @id @default(uuid())
  title         String
  authorId      String
  posts         Post[]
  author        User         @relation(fields: [authorId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Subcategory Subcategory[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  threads     Thread[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
}
